ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v1
Ref(integer) v2
integer x
integer q


Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer qinteger x

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer q

Symbol Table = 
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v1, 20)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)
new(v1, 20)

Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)new(v2, 30)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)-1)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)+5)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
  

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =4
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =5
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Lock(x)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)print(rH(v1))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Unlock(q)print(rH(v2))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199
350


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199
350


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v1
Ref(integer) v2
integer x
integer q


Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer qinteger x

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer q

Symbol Table = 
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v1, 20)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)
new(v1, 20)

Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)new(v2, 30)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)-1)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)+5)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
  

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =4
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =5
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Lock(x)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)print(rH(v1))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)print(rH(v2))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v1
Ref(integer) v2
integer x
integer q


Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer qinteger x

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer q

Symbol Table = 
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v1, 20)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)
new(v1, 20)

Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)new(v2, 30)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)-1)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)+5)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
  

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =4
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =5
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Lock(x)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)print(rH(v1))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)print(rH(v2))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=305}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v1
Ref(integer) v2
integer x
integer q


Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer qinteger x

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer q

Symbol Table = 
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v1, 20)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)
new(v1, 20)

Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)new(v2, 30)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)-1)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)+5)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
  

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =4
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =5
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Lock(x)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)print(rH(v1))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)print(rH(v2))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v1
Ref(integer) v2
integer x
integer q


Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer qinteger x

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer q

Symbol Table = 
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v1, 20)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)
new(v1, 20)

Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)new(v2, 30)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)-1)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =4
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =5
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)+5)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
  

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =4
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =5
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Lock(x)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)print(rH(v1))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Unlock(q)print(rH(v2))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199
350


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
199
350


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=199, 2=350}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v1
Ref(integer) v2
integer x
integer q


Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer qinteger x

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer q

Symbol Table = 
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v1, 20)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)
new(v1, 20)

Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)new(v2, 30)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(q)

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)*10)

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)-1)

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=19, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=19, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =5
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=19, 2=30}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=19, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)
Lock(q)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)
Lock(q)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =4
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)*10)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =5
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)+5)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
  

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =4
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =5
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Lock(x)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)
Lock(x)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)print(rH(v1))

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 
19


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 
19


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)
Lock(q)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 
19


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 
19


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)print(rH(v2))

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 
19


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 
19
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
q=1
x=1
v1=(1, integer)
v2=(2, integer)


Output = 
19
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=19, 2=305}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v1
Ref(integer) v2
integer x
integer q


Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
Ref(integer) v2
integer x
integer q


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer x
integer q


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer qinteger x

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
integer q

Symbol Table = 
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 20)
new(v2, 30)
NewLock(x)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v1, 20)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)
new(v1, 20)

Symbol Table = 
q=0
x=0
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
new(v2, 30)
NewLock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)new(v2, 30)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
NewLock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
NewLock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Lock(x)
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
 
 
 
 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)-1)
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)wH(v1, rH(v1)-1)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=20, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=20, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =2
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =3
Program State 
Execution Stack = 
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
Lock(q)
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
wH(v2, rH(v2)+5)
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 
 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =4
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)*10)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =5
Program State 
Execution Stack = 
Unlock(q)wH(v2, rH(v2)+5)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=30}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
  

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =4
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =5
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)
 

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(x)
print(rH(v1))
Unlock(x)
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Lock(x)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)
Lock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
print(rH(v1))
Unlock(x)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)print(rH(v1))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)
Unlock(x)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Lock(q)
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)
Lock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
print(rH(v2))
Unlock(q)


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)print(rH(v2))

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 
Unlock(q)

Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
q=0
x=0
v1=(1, integer)
v2=(2, integer)


Output = 
190
305


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; integer x ; integer q ; new(v1, 20) ; new(v2, 30) ; NewLock(x) ; fork(fork(Lock(x) ; wH(v1, rH(v1)-1) ; Unlock(x)) ; Lock(x) ; wH(v1, rH(v1)*10) ; Unlock(x)) ; NewLock(q) ; fork(fork(Lock(q) ; wH(v2, rH(v2)+5) ; Unlock(q)) ; Lock(q) ; wH(v2, rH(v2)*10) ; Unlock(q)) ;   ;   ;   ;   ; Lock(x) ; print(rH(v1)) ; Unlock(x) ; Lock(q) ; print(rH(v2)) ; Unlock(q)

File table = 


Heap = 
{1=190, 2=305}

