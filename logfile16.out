ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
integer cnt

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
cnt=0
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
integer cnt

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
cnt=0
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; integer cnt ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
100
20
100
30


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=3
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v2
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v2

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
Ref(integer) v3
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
Ref(integer) v3

Symbol Table = 
v1=(0, integer)
v2=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 2)
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v1, 2)

Symbol Table = 
v1=(0, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v2, 3)
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v2, 3)

Symbol Table = 
v1=(1, integer)
v2=(0, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2}

ID =1
Program State 
Execution Stack = 
new(v3, 4)
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
new(v3, 4)

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3}

ID =1
Program State 
Execution Stack = 
newLatch(cnt, rH(v2))
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)
newLatch(cnt, rH(v2))

Symbol Table = 
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)
fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
await(cnt)
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=2, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))
print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 
fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
wH(v2, rH(v2)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=3, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
print(rH(v2))
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))
print(rH(v2))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
countDown(cnt)
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 
fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt))

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)
wH(v3, rH(v3)*10)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=4}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
print(rH(v3))
countDown(cnt)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)print(rH(v3))

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 
countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)
await(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)
print(100)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
countDown(cnt)
print(100)


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)countDown(cnt)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 
print(100)

Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)
v2=(2, integer)
v3=(3, integer)


Output = 
20
2
30
3
40
4
100
100


Initial program = 
Ref(integer) v1 ; Ref(integer) v2 ; Ref(integer) v3 ; new(v1, 2) ; new(v2, 3) ; new(v3, 4) ; newLatch(cnt, rH(v2)) ; fork(wH(v1, rH(v1)*10) ; print(rH(v1)) ; countDown(cnt) ; fork(wH(v2, rH(v2)*10) ; print(rH(v2)) ; countDown(cnt) ; fork(wH(v3, rH(v3)*10) ; print(rH(v3)) ; countDown(cnt)))) ; await(cnt) ; print(100) ; countDown(cnt) ; print(100)

File table = 


Heap = 
{1=20, 2=30, 3=40}

