ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=40}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=40}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10
40


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=40}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10
40


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=40}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=40}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=40}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=20}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*2) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
9
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
 

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
 
 
 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ;   ;   ;   ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =4
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =4
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =4
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =5
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =4
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =5
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =4
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =5
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =4
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =5
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =4
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =5
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =4
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =5
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =5
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =5
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =5
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =5
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =5
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =5
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =5
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
9
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
Ref(integer) v1

Symbol Table = 


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
integer cnt
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
integer cnt

Symbol Table = 
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
new(v1, 1)
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
new(v1, 1)

Symbol Table = 
cnt=0
v1=(0, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{}

ID =1
Program State 
Execution Stack = 
newSemaphore( cnt, rH(v1))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
newSemaphore( cnt, rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )
fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt ))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
acquire( cnt )
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=1}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =2
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*10)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=10}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )
wH(v1, rH(v1)*2)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=100}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
print(rH(v1))
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )print(rH(v1))

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )
acquire( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =3
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
print(rH(v1)-1)
release( cnt )


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )print(rH(v1)-1)

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 
release( cnt )

Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

ID =1
Program State 
Execution Stack = 


Symbol Table = 
cnt=0
v1=(1, integer)


Output = 
10
200
199


Initial program = 
Ref(integer) v1 ; integer cnt ; new(v1, 1) ; newSemaphore( cnt, rH(v1)) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; print(rH(v1)) ; release( cnt )) ; fork(acquire( cnt ) ; wH(v1, rH(v1)*10) ; wH(v1, rH(v1)*2) ; print(rH(v1)) ; release( cnt )) ; acquire( cnt ) ; print(rH(v1)-1) ; release( cnt )

File table = 


Heap = 
{1=200}

